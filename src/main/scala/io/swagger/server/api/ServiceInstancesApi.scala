/**
 * Open Service Broker API
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * OpenAPI spec version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package io.swagger.server.api

import io.swagger.server.model.AsyncOperation
import io.swagger.server.model.Error
import io.swagger.server.model.LastOperationResource
import io.swagger.server.model.ServiceInstanceAsyncOperation
import io.swagger.server.model.ServiceInstanceProvisionRequest
import io.swagger.server.model.ServiceInstanceProvisionResponse
import io.swagger.server.model.ServiceInstanceResource
import io.swagger.server.model.ServiceInstanceUpdateRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ServiceInstancesApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ServiceInstancesApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val serviceInstance.deprovisionOperation = (apiOperation[Object]("serviceInstance.deprovision")
      summary "deprovision a service instance"
      parameters(headerParam[String]("xBrokerAPIVersion").description(""), pathParam[String]("instanceId").description(""), queryParam[String]("serviceId").description(""), queryParam[String]("planId").description(""), headerParam[String]("xBrokerAPIOriginatingIdentity").description("").optional, headerParam[String]("xBrokerAPIRequestIdentity").description("").optional, queryParam[Boolean]("acceptsIncomplete").description("").optional)
  )

  delete("/v2/service_instances/:instance_id",operation(serviceInstance.deprovisionOperation)) {
    
    
          val xBrokerAPIVersion = request.getHeader("xBrokerAPIVersion")

    println("xBrokerAPIVersion: " + xBrokerAPIVersion)
    
    
      val instanceId = params.getOrElse("instanceId", halt(400))
    
    println("instanceId: " + instanceId)
    
    
                val serviceId = params.getAs[String]("serviceId")

    println("serviceId: " + serviceId)
    
    
                val planId = params.getAs[String]("planId")

    println("planId: " + planId)
    
    
          val xBrokerAPIOriginatingIdentity = request.getHeader("xBrokerAPIOriginatingIdentity")

    println("xBrokerAPIOriginatingIdentity: " + xBrokerAPIOriginatingIdentity)
    
    
          val xBrokerAPIRequestIdentity = request.getHeader("xBrokerAPIRequestIdentity")

    println("xBrokerAPIRequestIdentity: " + xBrokerAPIRequestIdentity)
    
    
                val acceptsIncomplete = params.getAs[Boolean]("acceptsIncomplete")

    println("acceptsIncomplete: " + acceptsIncomplete)
  }

  

  val serviceInstance.getOperation = (apiOperation[ServiceInstanceResource]("serviceInstance.get")
      summary "gets a service instance"
      parameters(headerParam[String]("xBrokerAPIVersion").description(""), pathParam[String]("instanceId").description(""), headerParam[String]("xBrokerAPIOriginatingIdentity").description("").optional, headerParam[String]("xBrokerAPIRequestIdentity").description("").optional, queryParam[String]("serviceId").description("").optional, queryParam[String]("planId").description("").optional)
  )

  get("/v2/service_instances/:instance_id",operation(serviceInstance.getOperation)) {
    
    
          val xBrokerAPIVersion = request.getHeader("xBrokerAPIVersion")

    println("xBrokerAPIVersion: " + xBrokerAPIVersion)
    
    
      val instanceId = params.getOrElse("instanceId", halt(400))
    
    println("instanceId: " + instanceId)
    
    
          val xBrokerAPIOriginatingIdentity = request.getHeader("xBrokerAPIOriginatingIdentity")

    println("xBrokerAPIOriginatingIdentity: " + xBrokerAPIOriginatingIdentity)
    
    
          val xBrokerAPIRequestIdentity = request.getHeader("xBrokerAPIRequestIdentity")

    println("xBrokerAPIRequestIdentity: " + xBrokerAPIRequestIdentity)
    
    
                val serviceId = params.getAs[String]("serviceId")

    println("serviceId: " + serviceId)
    
    
                val planId = params.getAs[String]("planId")

    println("planId: " + planId)
  }

  

  val serviceInstance.lastOperation.getOperation = (apiOperation[LastOperationResource]("serviceInstance.lastOperation.get")
      summary "last requested operation state for service instance"
      parameters(headerParam[String]("xBrokerAPIVersion").description(""), pathParam[String]("instanceId").description(""), headerParam[String]("xBrokerAPIOriginatingIdentity").description("").optional, headerParam[String]("xBrokerAPIRequestIdentity").description("").optional, queryParam[String]("serviceId").description("").optional, queryParam[String]("planId").description("").optional, queryParam[String]("operation").description("").optional)
  )

  get("/v2/service_instances/:instance_id/last_operation",operation(serviceInstance.lastOperation.getOperation)) {
    
    
          val xBrokerAPIVersion = request.getHeader("xBrokerAPIVersion")

    println("xBrokerAPIVersion: " + xBrokerAPIVersion)
    
    
      val instanceId = params.getOrElse("instanceId", halt(400))
    
    println("instanceId: " + instanceId)
    
    
          val xBrokerAPIOriginatingIdentity = request.getHeader("xBrokerAPIOriginatingIdentity")

    println("xBrokerAPIOriginatingIdentity: " + xBrokerAPIOriginatingIdentity)
    
    
          val xBrokerAPIRequestIdentity = request.getHeader("xBrokerAPIRequestIdentity")

    println("xBrokerAPIRequestIdentity: " + xBrokerAPIRequestIdentity)
    
    
                val serviceId = params.getAs[String]("serviceId")

    println("serviceId: " + serviceId)
    
    
                val planId = params.getAs[String]("planId")

    println("planId: " + planId)
    
    
                val operation = params.getAs[String]("operation")

    println("operation: " + operation)
  }

  

  val serviceInstance.provisionOperation = (apiOperation[ServiceInstanceProvisionResponse]("serviceInstance.provision")
      summary "provision a service instance"
      parameters(headerParam[String]("xBrokerAPIVersion").description(""), pathParam[String]("instanceId").description(""), bodyParam[ServiceInstanceProvisionRequest]("body").description(""), headerParam[String]("xBrokerAPIOriginatingIdentity").description("").optional, headerParam[String]("xBrokerAPIRequestIdentity").description("").optional, queryParam[Boolean]("acceptsIncomplete").description("").optional)
  )

  put("/v2/service_instances/:instance_id",operation(serviceInstance.provisionOperation)) {
    
    
          val xBrokerAPIVersion = request.getHeader("xBrokerAPIVersion")

    println("xBrokerAPIVersion: " + xBrokerAPIVersion)
    
    
      val instanceId = params.getOrElse("instanceId", halt(400))
    
    println("instanceId: " + instanceId)
    
    
          val body = parsedBody.extract[ServiceInstanceProvisionRequest]

    println("body: " + body)
    
    
          val xBrokerAPIOriginatingIdentity = request.getHeader("xBrokerAPIOriginatingIdentity")

    println("xBrokerAPIOriginatingIdentity: " + xBrokerAPIOriginatingIdentity)
    
    
          val xBrokerAPIRequestIdentity = request.getHeader("xBrokerAPIRequestIdentity")

    println("xBrokerAPIRequestIdentity: " + xBrokerAPIRequestIdentity)
    
    
                val acceptsIncomplete = params.getAs[Boolean]("acceptsIncomplete")

    println("acceptsIncomplete: " + acceptsIncomplete)
  }

  

  val serviceInstance.updateOperation = (apiOperation[Object]("serviceInstance.update")
      summary "update a service instance"
      parameters(headerParam[String]("xBrokerAPIVersion").description(""), pathParam[String]("instanceId").description(""), bodyParam[ServiceInstanceUpdateRequest]("body").description(""), headerParam[String]("xBrokerAPIOriginatingIdentity").description("").optional, headerParam[String]("xBrokerAPIRequestIdentity").description("").optional, queryParam[Boolean]("acceptsIncomplete").description("").optional)
  )

  patch("/v2/service_instances/:instance_id",operation(serviceInstance.updateOperation)) {
    
    
          val xBrokerAPIVersion = request.getHeader("xBrokerAPIVersion")

    println("xBrokerAPIVersion: " + xBrokerAPIVersion)
    
    
      val instanceId = params.getOrElse("instanceId", halt(400))
    
    println("instanceId: " + instanceId)
    
    
          val body = parsedBody.extract[ServiceInstanceUpdateRequest]

    println("body: " + body)
    
    
          val xBrokerAPIOriginatingIdentity = request.getHeader("xBrokerAPIOriginatingIdentity")

    println("xBrokerAPIOriginatingIdentity: " + xBrokerAPIOriginatingIdentity)
    
    
          val xBrokerAPIRequestIdentity = request.getHeader("xBrokerAPIRequestIdentity")

    println("xBrokerAPIRequestIdentity: " + xBrokerAPIRequestIdentity)
    
    
                val acceptsIncomplete = params.getAs[Boolean]("acceptsIncomplete")

    println("acceptsIncomplete: " + acceptsIncomplete)
  }

}
